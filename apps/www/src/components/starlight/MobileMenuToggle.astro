---
import type { Props } from "@astrojs/starlight/props";
import { Icon } from "@astrojs/starlight/components";

import { buttonVariants } from "@/registry/new-york/ui/button.directive";
import { cn } from "@/lib/utils";

const { labels } = Astro.props;
---

<starlight-menu-button>
  <button
    aria-expanded="false"
    aria-label={labels["menuButton.accessibleLabel"]}
    aria-controls="starlight__sidebar"
    class={cn(
      buttonVariants({ variant: "ghost", size: "icon" }),
      "flex md:hidden"
    )}
  >
    <Icon name="bars" />
  </button>
</starlight-menu-button>

<script>
  class StarlightMenuButton extends HTMLElement {
    btn = this.querySelector("button")!;

    constructor() {
      super();
      // Toggle `aria-expanded` state when a user clicks the button.
      this.btn.addEventListener("click", () => this.toggleExpanded());

      // Close the menu when a user presses the escape key.
      const parentNav = this.closest("nav");
      if (parentNav) {
        parentNav.addEventListener("keyup", (e) => this.closeOnEscape(e));
      }
    }

    setExpanded(expanded: boolean) {
      this.setAttribute("aria-expanded", String(expanded));
      document.body.toggleAttribute("data-mobile-menu-expanded", expanded);
    }

    toggleExpanded() {
      this.setExpanded(this.getAttribute("aria-expanded") !== "true");
    }

    closeOnEscape(e: KeyboardEvent) {
      if (e.code === "Escape") {
        this.setExpanded(false);
        this.btn.focus();
      }
    }
  }

  customElements.define("starlight-menu-button", StarlightMenuButton);
</script>

<style>
  button {
    position: fixed;
    top: calc((var(--sl-nav-height) - var(--sl-menu-button-size)) / 3);
    inset-inline-end: var(--sl-nav-pad-x);
    z-index: var(--sl-z-index-navbar);
  }
</style>
