---
import { cn } from "@/lib/utils";
import { flattenSidebar, type SidebarEntry } from "../../utils/navigation";
import { Badge } from "@astrojs/starlight/components";

interface Props {
  sublist: SidebarEntry[];
  nested?: boolean;
}

const { sublist, nested } = Astro.props;
---

<ul class:list={{ "top-level": !nested }}>
  {
    sublist.map((entry) => (
      <li>
        {entry.type === "link" ? (
          <a
            href={entry.href}
            aria-current={entry.isCurrent && "page"}
            class:list={[
              { large: !nested },
              entry.attrs.class,
              cn(
                "group flex w-full items-center rounded-md border border-transparent px-2 py-1 hover:underline",
                entry.isCurrent
                  ? "font-medium text-foreground"
                  : "text-muted-foreground"
              ),
            ]}
            {...entry.attrs}
          >
            <span>{entry.label}</span>
            {entry.badge && (
              <Badge
                variant={entry.badge.variant}
                class={entry.badge.class}
                text={entry.badge.text}
              />
            )}
          </a>
        ) : (
          <details
            open={
              flattenSidebar(entry.entries).some((i) => i.isCurrent) ||
              !entry.collapsed
            }
          >
            <summary>
              <div class="group-label">
                <span class="large">{entry.label}</span>
                {entry.badge && (
                  <Badge
                    variant={entry.badge.variant}
                    class={entry.badge.class}
                    text={entry.badge.text}
                  />
                )}
              </div>
              {/* <Icon name="right-caret" class="caret" size="1.25rem" /> */}
            </summary>
            <Astro.self sublist={entry.entries} nested />
          </details>
        )}
      </li>
    ))
  }
</ul>

<style>
  ul {
    --sl-sidebar-item-padding-inline: 0.5rem;
    list-style: none;
    padding: 0;
  }

  li {
    overflow-wrap: anywhere;
  }

  ul ul li {
    margin-inline-start: var(--sl-sidebar-item-padding-inline);
    padding-inline-start: var(--sl-sidebar-item-padding-inline);
  }

  .large {
    @apply mb-1 rounded-md px-2 py-1 text-sm font-semibold;
  }

  .top-level > li + li {
    margin-top: 0.75rem;
  }

  summary {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 0.2em var(--sl-sidebar-item-padding-inline);
    line-height: 1.4;
    cursor: pointer;
    user-select: none;
  }
  summary::marker,
  summary::-webkit-details-marker {
    display: none;
  }
  summary::marker {
    content: "";
  }

  .caret {
    transition: transform 0.2s ease-in-out;
    flex-shrink: 0;
  }
  :global([dir="rtl"]) .caret {
    transform: rotateZ(180deg);
  }
  [open] > summary .caret {
    transform: rotateZ(90deg);
  }

  a > *:not(:last-child),
  .group-label > *:not(:last-child) {
    margin-inline-end: 0.25em;
  }

  @media (min-width: 50rem) {
    .top-level > li + li {
      margin-top: 0.5rem;
    }
  }
</style>
