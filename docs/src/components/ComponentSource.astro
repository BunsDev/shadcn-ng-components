---
import { readFileSync } from 'node:fs'
import path from 'node:path'
import process from 'node:process'
import { styles } from '@/registry/styles'
import { ui } from '@/registry/ui'
import { Code } from '@astrojs/starlight/components'

import { SelectStyle, SelectStyleItem, syncKey } from './SelectStyle'

export interface Props {
  name: string
}

const { name } = Astro.props

const componentUi = ui.find(value => value.name === name)

const allComponents = componentUi?.files.flatMap((file) => {
  return styles.map((style) => {
    const filename = path.join(
      process.cwd(),
      'src',
      'registry',
      style.name,
      file,
    )

    let code: string | null

    try {
      code = readFileSync(`${filename}`)
        .toString()
        .replace(/export\s+default\s+(?:\S.*)?;\s*/, '')
        .replace(/@\/registry\/.*\/ui/g, '@/components/ui')
    }
    catch {
      code = null
    }

    return {
      style,
      code,
    }
  })
});
---

<SelectStyle syncKey={syncKey} hiddenSelect={true}>
  {
    allComponents?.map(({ code, style }) => (
      <SelectStyleItem label={style.label}>
        {code
? (
          <Code code={code} lang="angular-ts" wrap={true} />
        )
: (
          <p>Not found</p>
        )}
      </SelectStyleItem>
    ))
  }
</SelectStyle>
