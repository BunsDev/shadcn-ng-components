---
import { processPanels } from './rehype-select-style'

interface Props {
  syncKey?: string
  hiddenSelect?: boolean
}

const { syncKey, hiddenSelect = false } = Astro.props
const panelHtml = await Astro.slots.render('default')
const { html, panels } = processPanels(panelHtml);
---

<ub-selects-preview data-sync-key={syncKey}>
  {
    !hiddenSelect && (
      <div class="mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 relative rounded-md border">
        <div class="flex items-center justify-between p-4">
          {panels && (
            <select class="flex items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 shadow-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>option]:line-clamp-1 h-7 w-[145px] text-xs">
              {panels.map(({ label, panelId }) => (
                <option value={panelId}>{label}</option>
              ))}
            </select>
          )}
        </div>
        <div class="w-full" style="--radius: 0.5rem;">
          <div class="preview flex min-h-[350px] w-full justify-center p-10 items-center not-content">
            <Fragment set:html={html} />
          </div>
        </div>
      </div>
    )
  }

  {
    hiddenSelect && (
      <div>
        {panels && (
          <select class="hidden">
            {panels.map(({ label, panelId }) => (
              <option value={panelId}>{label}</option>
            ))}
          </select>
        )}
        <div>
          <div>
            <Fragment set:html={html} />
          </div>
        </div>
      </div>
    )
  }
</ub-selects-preview>

<style>
  ub-selects-preview {
    display: block;
  }
</style>

<script>
class SelectsPreview extends HTMLElement {
  // A map of sync keys to all tabs that are synced to that key.
  static #syncedTabs = new Map<string, SelectsPreview[]>()

  panels: HTMLElement[]
  #syncKey: string | undefined

  constructor() {
    super()
    const tablist = this.querySelector<HTMLSelectElement>('select')!
    this.panels = [
      ...this.querySelectorAll<HTMLElement>(
        ':scope > div > div > div > [role="tabpanel"]',
      ),
    ]
    this.#syncKey = this.dataset.syncKey

    if (this.#syncKey) {
      const syncedTabs = SelectsPreview.#syncedTabs.get(this.#syncKey) ?? []
      syncedTabs.push(this)
      SelectsPreview.#syncedTabs.set(this.#syncKey, syncedTabs)
    }

    tablist.addEventListener('change', (e) => {
      const value = (e.target as HTMLSelectElement).value
      e.preventDefault()
      // get label of selected option
      const selectedOption = tablist.options[tablist.selectedIndex]
      this.changePreview(this, value, selectedOption.text)
    })
  }

  changePreview(
    newTab: SelectsPreview,
    id: string,
    label: string,
      syncPreview = true,
  ): void {
    newTab.panels.forEach((oldPanel) => {
      if (oldPanel.id === id) {
        oldPanel.hidden = false
      }
      else {
        oldPanel.hidden = true
      }
    })

    if (syncPreview) {
      SelectsPreview.#syncTabs(this, label)
    }
  }

  static #syncTabs(emitter: SelectsPreview, label: string | null): void {
    const syncKey = emitter.#syncKey
    if (!syncKey || !label)
      return
    const syncedTabs = SelectsPreview.#syncedTabs.get(syncKey)
    if (!syncedTabs)
      return

    for (const receiver of syncedTabs) {
      if (receiver === emitter)
        continue
        // const labelIndex = receiver.panels.findIndex((tab) => tab.id === id);
        // if (labelIndex === -1) continue;
        // receiver.changePreview(receiver, id, false);
      const select = receiver.querySelector<HTMLSelectElement>('select')!
      // get option by label text
      const option = Array.from(select.options).find(
        option => option.text === label,
      )
      // change select value with option value
      select.value = option?.value ?? ''
      receiver.changePreview(receiver, option!.value, label, false)
    }
  }
}

customElements.define('ub-selects-preview', SelectsPreview)
</script>
