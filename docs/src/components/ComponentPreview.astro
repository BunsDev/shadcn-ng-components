---
import { existsSync, readFileSync } from 'node:fs'
import path from 'node:path'
import process from 'node:process'
import { cn } from '@/lib/utils'

import { styles } from '@/registry/styles'

import { Code, TabItem, Tabs } from '@astrojs/starlight/components'
import { ComponentPeviewComponent } from './component-preview'
import { SelectStyle, SelectStyleItem, syncKey } from './SelectStyle'

export interface Props {
  name: string
  class?: string
}
const { name } = Astro.props

const components = await Promise.all(
  styles.map(async (style) => {
    const filename = path.join(process.cwd(), 'src', 'registry', style.name, 'example', `${name}.ts`)
    let pathCode: string
    let code: string | null

    if (existsSync(filename)) {
      pathCode = `../registry/${style.name}/example/${name}.ts`
      code = readFileSync(`${filename}`)
        .toString()
        .replace(/export\s+default\s+(?:\S.*)?;\s*/, '')
        .replace(/@\/registry\/.*\/ui/g, '@/components/ui')
    }
 else {
      pathCode = ''
      code = null
    }

    return {
      style,
      code,
      path: pathCode,
    }
  }),
)
---

<div class={cn('not-content group relative my-4 flex flex-col space-y-2', Astro.props.class)}>
  <Tabs>
    <TabItem label="Preview">
      <SelectStyle syncKey={syncKey}>
        {
          components.map(({ style, path }) => (
            <SelectStyleItem label={style.label}>{path ? <ComponentPeviewComponent nameExample={name} styleName={style.name} client:visible /> : <p>Not found</p>}</SelectStyleItem>
          ))
        }
      </SelectStyle>
    </TabItem>
    <TabItem label="Code">
      <SelectStyle syncKey={syncKey} hiddenSelect={true}>
        {components.map(({ style, code }) => <SelectStyleItem label={style.label}>{code ? <Code code={code} lang="angular-ts" /> : <p>Not found</p>}</SelectStyleItem>)}
      </SelectStyle>
    </TabItem>
  </Tabs>
</div>
