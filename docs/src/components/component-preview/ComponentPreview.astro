---
import { existsSync, readFileSync } from 'node:fs'
import path from 'node:path'
import process from 'node:process'
import { cn } from '@/lib/utils'
import { styles } from '@/registry/registry-styles'

import CopyButton from '../CopyButton.astro'

import StyleSwitcher from '../StyleSwitcher.astro'

import { Tabs, TabsContent, TabsList, TabsTrigger } from '../tabs'

import { ComponentPeviewComponent } from './component-preview'

export interface Props {
  name: string
  class?: string
  align?: string
}
const { name, class: className, align = 'center', ...rest } = Astro.props

const sortedStyleByNewYork = styles.toSorted((a, b) => (a.name === 'new-york' ? -1 : b.name === 'new-york' ? 1 : 0))

const components = await Promise.all(
  [...sortedStyleByNewYork].map(async (style) => {
    const filename = path.join(process.cwd(), 'src', 'registry', style.name, 'example', `${name}.ts`)
    let pathCode: string
    let code: string | null

    if (existsSync(filename)) {
      pathCode = `../registry/${style.name}/example/${name}.ts`
      code = readFileSync(`${filename}`)
        .toString()
        .replace(/@\/registry\/.*\/ui/g, '@/components/ui')
        .replace(/export\s+default\s+(?:\S.*)?\s*/, '')
    } else {
      pathCode = ''
      code = null
    }

    return {
      style,
      code,
      pathCode,
    }
  }),
)
---

<div x-data class={cn('group relative my-4 flex flex-col space-y-2', className)} {...rest}>
  <Tabs class="relative mr-auto w-full">
    <div class="flex items-center justify-between pb-3">
      <TabsList class="w-full justify-start rounded-none border-b bg-transparent p-0">
        <TabsTrigger
          class="relative h-9 rounded-none border-b-2 border-b-transparent bg-transparent px-4 pb-3 pt-2 font-semibold text-muted-foreground shadow-none transition-none data-[state=active]:border-b-primary data-[state=active]:text-foreground data-[state=active]:shadow-none"
        >
          Preview
        </TabsTrigger>
        <TabsTrigger
          class="relative h-9 rounded-none border-b-2 border-b-transparent bg-transparent px-4 pb-3 pt-2 font-semibold text-muted-foreground shadow-none transition-none data-[state=active]:border-b-primary data-[state=active]:text-foreground data-[state=active]:shadow-none"
        >
          Code
        </TabsTrigger>
      </TabsList>
    </div>

    <TabsContent class="relative rounded-md border">
      <div class="flex items-center justify-between p-4">
        <StyleSwitcher />
      </div>
      <div
        class={cn('preview flex min-h-[350px] w-full justify-center p-10', {
          'items-center': align === 'center',
          'items-start': align === 'start',
          'items-end': align === 'end',
        })}
      >
        {
          components.map(({ style, pathCode, code }) => (
            <div x-show={`$store.style === '${style.name}'`}>
              {pathCode ? (
                <>
                  <CopyButton value={code ?? ''} class={cn('absolute right-4 top-4')} />
                  <ComponentPeviewComponent client:visible {...{ nameExample: name, styleName: style.name }} />
                </>
              ) : (
                <p class="text-sm text-muted-foreground">
                  Component{' '}
                  <code class="relative rounded bg-muted px-[0.3rem] py-[0.2rem] font-mono text-sm">{name}</code>
                  {' not found in registry.'}
                </p>
              )}
            </div>
          ))
        }
      </div>
    </TabsContent>

    <TabsContent>
      <div class="flex flex-col space-y-4">
        <div class="w-full rounded-md [&_pre]:my-0 [&_pre]:max-h-[410px] [&_pre]:overflow-auto">
          <template x-if="$store.style === 'new-york'">
            <slot name="new-york" slot="new-york"> <p>Not found</p> </slot>
          </template>
          <template x-if="$store.style === 'default'">
            <slot name="default" slot="default"> <p>Not found</p> </slot>
          </template>
        </div>
      </div>
    </TabsContent>
  </Tabs>
</div>
