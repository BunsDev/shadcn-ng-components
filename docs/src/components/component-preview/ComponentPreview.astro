---
import { existsSync, readFileSync } from 'node:fs'
import path from 'node:path'
import process from 'node:process'
import { cn } from '@/lib/utils'
import { styles } from '@/registry/registry-styles'

import CopyButton from '../CopyButton.astro'

import { Tabs, TabsContent, TabsList, TabsTrigger } from '../tabs'

import { ComponentPeviewComponent } from './component-preview'
import { Select, SelectContent, syncKey } from './select'

export interface Props {
  name: string
  class?: string
}
const { name, class: className, ...rest } = Astro.props

const sortedStyleByNewYork = styles.toSorted((a, b) => (a.name === 'new-york' ? -1 : b.name === 'new-york' ? 1 : 0))

const components = await Promise.all(
  [...sortedStyleByNewYork].map(async (style) => {
    const filename = path.join(process.cwd(), 'src', 'registry', style.name, 'example', `${name}.ts`)
    let pathCode: string
    let code: string | null

    if (existsSync(filename)) {
      pathCode = `../registry/${style.name}/example/${name}.ts`
      code = readFileSync(`${filename}`)
        .toString()
        .replace(/@\/registry\/.*\/ui/g, '@/components/ui')
        .replace(/export\s+default\s+(?:\S.*)?\s*/, '')
    } else {
      pathCode = ''
      code = null
    }

    return {
      style,
      code,
      pathCode,
    }
  }),
)
---

<div class={cn('group relative my-4 flex flex-col space-y-2', className)} {...rest}>
  <Tabs>
    <TabsList>
      <TabsTrigger value="Preview">Preview</TabsTrigger>
      <TabsTrigger value="Code">Code</TabsTrigger>
    </TabsList>

    <TabsContent value="Preview">
      <Select syncKey={syncKey}>
        {
          components.map(({ style, pathCode, code }) => (
            <SelectContent label={style.label} value={style.name}>
              {pathCode ? (
                <div>
                  <CopyButton value={code ?? ''} class={cn('absolute right-4 top-4')} />
                  <ComponentPeviewComponent client:visible {...{ nameExample: name, styleName: style.name }} />
                </div>
              ) : (
                <p>Not found</p>
              )}
            </SelectContent>
          ))
        }
      </Select>
    </TabsContent>
    <TabsContent value="Code">
      <Select syncKey={syncKey} hideSelect={true}>
        <SelectContent label={styles[0].label} value={styles[0].name}>
          <slot name="new-york"> <p>Not found</p> </slot>
        </SelectContent>
        <SelectContent label={styles[1].label} value={styles[1].name}>
          <slot name="default"> <p>Not found</p> </slot>
        </SelectContent>
      </Select>
    </TabsContent>
  </Tabs>
</div>
